from common import Metadata
from typing import List, Dict, Tuple
from feature import Key, Feature
from code import ModelTrainingCode, DataCode
from infrastructure import ModelRegistry


class Prediction(Feature):
    """A data value that was generated by a trained ML model.  Includes both predictions served directly to an end user, but also predictions used as part of an `ml_transformation`."""

    # model_used: Model
    # TODO make into an output only property that's looked up
    """
    Output only. Automatically generated by Orchestra based on the Model that made this prediction.
    What `Model` delivered this prediction?  References a specific version. The Model object includes all metadata & lineage such as training data used, version info, etc
    """

    input_features: List[Feature]
    """
    Output only. Automatically generated by Orchestra based on the Model that made this prediction.
    What are the Model's inputs?
    """

    # TODO: Decide if business_logic and ml_transformations can be defined for a Prediction.  I can see a use case where you might use business_logic to transform the raw prediciton into a user-facing value (e.g., if >.5 confidence, use value, otherwise, ...).  Similarly, I can maybe see a use case for ml_transformation where the prediction goes through some sort of normalization??

    ml_transformations: None
    business_logic: None

    # TODO: Will we be able to represent model predictions with human_datatype as-is?  I think we might need to make changes to account for models such as a multi-class model, saving the predic_proba, etc.  It may be that we create a special datatype for prediction and then use human_datatype to represent the value after all business_logic is applied??


class Label(Feature):
    """A data value that is used to train a semi-supervised or supervised ML model"""

    # TODO: I /think/ Label can be identical, but we may want to exclude ml_transformations?  But need to think about this a bit more...


class RawLabel(Label):
    """
    A label that comes directly from a DataProvider without any manipulation.  If it's wrong it is the upstream provider's fault ;-)
    """


class DerivedLabel(Label):
    """
    A label that has business_logic applied to get the correct value.  For example, removing known bad labels, etc.
    """


class TrainingData(Tuple):
    features: List[Feature]
    labels: List[Label]


class Model:
    """
    Orchestra is designed to integrate with Model Registries (which often double as Experiment Tracking and sometimes Monitoring tools).  Orchestra considers the Model Registry as the system of record for models.  The goal of Orchestraâ€™s model abstraction is to include the bare minimum information to:

    - Link to the Trained Model within the user's Model Registry (MLFlow, W&B, etc)
    - Retrieve form Orchestra the specific `Features` a Trained Model needs as inputs
    - Link to the serving infrastructure for the Trained Model
    - Associate prediction logs from the serving infrastructure with the Trained Model
    - Route traffic for any production A/B tests to the appropriate model server
    - Create a complete audit log of what data and code the model used"""

    metadata: Metadata
    """
    name, description, key:value tags
    """

    input_keys: List[Key]
    """
    Output only. What data keys describe the entity upon which the prediction is made?
    Autmatically set during model training process by Orchestra.
    """

    input_features: List[Feature]
    """
    Output only. What input features are required for this model?
    Autmatically set during model training process by Orchestra.
    """

    output_datacode: DataCode
    """
    optionally, code that processes the direct output of .predict() to the `output_features`
    """

    output_features: Dict[Prediction, Feature]
    """
    Predicted value and any metadata for each prediction
    e.g., predict_proba, etc"""

    training_code: ModelTrainingCode
    """
    Output only. training code used.
    """

    training_data: TrainingData
    """
    Output only. training code used.
    """

    model_registry: ModelRegistry
    """
    Output only. link to the model registry set by orchestra during the training process
    """
